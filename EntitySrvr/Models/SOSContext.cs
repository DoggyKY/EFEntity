// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace EntitySrvr.Models;

public partial class SOSContext : DbContext
{
    public SOSContext()
    {
    }

    public SOSContext(DbContextOptions<SOSContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Action> Actions { get; set; }

    public virtual DbSet<Activity> Activities { get; set; }

    public virtual DbSet<Certificate> Certificates { get; set; }

    public virtual DbSet<Certtype> Certtypes { get; set; }

    public virtual DbSet<Change> Changes { get; set; }

    public virtual DbSet<Company> Companies { get; set; }

    public virtual DbSet<Country> Countries { get; set; }

    public virtual DbSet<Countrycode> Countrycodes { get; set; }

    public virtual DbSet<County> Counties { get; set; }

    public virtual DbSet<Emailaddress> Emailaddresses { get; set; }

    public virtual DbSet<Entitytype> Entitytypes { get; set; }

    public virtual DbSet<Erslog> Erslogs { get; set; }

    public virtual DbSet<ErsmanageQ> ErsmanageQs { get; set; }

    public virtual DbSet<Ersqueue> Ersqueues { get; set; }

    public virtual DbSet<Fee> Fees { get; set; }

    public virtual DbSet<Filmcode> Filmcodes { get; set; }

    public virtual DbSet<FutureAct> FutureActs { get; set; }

    public virtual DbSet<FutureProcessed> FutureProcesseds { get; set; }

    public virtual DbSet<Image> Images { get; set; }

    public virtual DbSet<Letter> Letters { get; set; }

    public virtual DbSet<Lettertype> Lettertypes { get; set; }

    public virtual DbSet<NewArpOfficer> NewArpOfficers { get; set; }

    public virtual DbSet<NewArpOfficerChange> NewArpOfficerChanges { get; set; }

    public virtual DbSet<NewArpOfficerDeleted> NewArpOfficerDeleteds { get; set; }

    public virtual DbSet<NewArponline> NewArponlines { get; set; }

    public virtual DbSet<NextId> NextIds { get; set; }

    public virtual DbSet<Officer> Officers { get; set; }

    public virtual DbSet<Offtype> Offtypes { get; set; }

    public virtual DbSet<OnlineFiling> OnlineFilings { get; set; }

    public virtual DbSet<Payment> Payments { get; set; }

    public virtual DbSet<Person> People { get; set; }

    public virtual DbSet<Racpocreturn> Racpocreturns { get; set; }

    public virtual DbSet<ReturnLetterText> ReturnLetterTexts { get; set; }

    public virtual DbSet<Returnletter> Returnletters { get; set; }

    public virtual DbSet<Returnletterlink> Returnletterlinks { get; set; }

    public virtual DbSet<Returnlettersubject> Returnlettersubjects { get; set; }

    public virtual DbSet<Searchlog> Searchlogs { get; set; }

    public virtual DbSet<State> States { get; set; }

    public virtual DbSet<Xstatus> Xstatuses { get; set; }

    protected override void OnConfiguring(DbContextOptionsBuilder optionsBuilder)
#warning To protect potentially sensitive information in your connection string, you should move it out of source code. You can avoid scaffolding the connection string by using the Name= syntax to read it from configuration - see https://go.microsoft.com/fwlink/?linkid=2131148. For more guidance on storing connection strings, see http://go.microsoft.com/fwlink/?LinkId=723263.
        => optionsBuilder.UseSqlServer("Data Source=SOSSQLTest;Initial Catalog=SOS;TrustServerCertificate=True; Integrated Security=True");

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Action>(entity =>
        {
            entity.HasKey(e => e.Code).IsClustered(false);
        });

        modelBuilder.Entity<Activity>(entity =>
        {
            entity.HasKey(e => e.Ctr)
                .HasName("aaaaaActivities_PK")
                .IsClustered(false);

            entity.ToTable(tb =>
                {
                    tb.HasTrigger("Activities_ITrig");
                    tb.HasTrigger("Activities_UTrig");
                    tb.HasTrigger("Trigger2");
                });

            entity.HasIndex(e => new { e.Id, e.Comptyp, e.Compseq }, "act_compidx").IsClustered();

            entity.Property(e => e.Ctr).HasComment("Unique identifier for this activity record");
            entity.Property(e => e.Code).HasComment("3 character code defines activity type - defined in table actions");
            entity.Property(e => e.Compseq).HasComment("compseq field of the company this activity refers to");
            entity.Property(e => e.Comptyp).HasComment("comptype field of the company record this activity refers to");
            entity.Property(e => e.Datetime).HasComment("No longer in use, replaced by dt field");
            entity.Property(e => e.Dt).HasComment("Date and time this activity was filed");
            entity.Property(e => e.EffDate).HasComment("Date and time this activity became effective");
            entity.Property(e => e.Fee).HasComment("The fee charged for this activity");
            entity.Property(e => e.Id).HasComment("ID of the company record this activity refers to");
            entity.Property(e => e.Mscompid).HasComment("id field of additional company referenced by this action, 9999999 =non-qualified");
            entity.Property(e => e.Mscompseq).HasComment("compseq field of additional company referenced by this action, 99999 =non-qualified");
            entity.Property(e => e.Mscomptyp).HasComment("comptype field of additional company referenced by this action, 99 =non-qualified");
            entity.Property(e => e.Nqname).HasComment("If mscompid=9999999 (non-qualified) name of the non-qualified entity");
            entity.Property(e => e.Reason).HasComment("Reason for deleting this record (see deletedactivities)");
            entity.Property(e => e.Subcode).HasComment("if code is AMD (amendment) two digit amendment subtype - defined in amendtypes");
            entity.Property(e => e.Userid).HasComment("userid of the original filer of this activity");
        });

        modelBuilder.Entity<Change>(entity =>
        {
            entity.HasKey(e => e.Idctr)
                .HasName("aaaaaChanges_PK")
                .IsClustered(false);
        });

        modelBuilder.Entity<Company>(entity =>
        {
            entity.HasKey(e => e.Ctr)
                .HasName("aaaaaCompany_PK")
                .IsClustered(false);

            entity.ToTable("company", tb =>
                {
                    tb.HasTrigger("CompanyLogPOAddressChanges");
                    tb.HasTrigger("CompanyLogRAAddressChanges");
                    tb.HasTrigger("company_TriggerIns");
                    tb.HasTrigger("company_deletetrigger");
                    tb.HasTrigger("t_companyui");
                });

            entity.HasIndex(e => e.Ctr, "Company_ctr").IsClustered();

            entity.HasIndex(e => new { e.Nameindex, e.Status }, "company_nameindexx").HasFillFactor(85);

            entity.Property(e => e.Ctr).HasComment("SQl assigned unique key for the record.");
            entity.Property(e => e.Arppin)
                .IsFixedLength()
                .HasComment("Deprecated.  Was a 4-digit random pin number for filing online annual reports");
            entity.Property(e => e.Arpprinted).HasComment("Internal use. indicates an annual report has been printed for this entity.");
            entity.Property(e => e.Authdate).HasComment("This field contains the date the business record has authority to operate in the Commonwealth.  This field only contains an entry for foreign businesses.  A business record contains either filedate, orgdate, or authdate, whichever is appropriate for the company type.");
            entity.Property(e => e.Compseq).HasComment("Company sequence is defined as a numeric value starting at 99999 and goes downward as new assumed names are added, or as the company is renamed. For a given ID-comptype combination, starts with 99999");
            entity.Property(e => e.Comptype).HasComment("Numeric entity type. Defined in entitytype");
            entity.Property(e => e.Coop)
                .HasDefaultValueSql("((0))")
                .HasComment("The entity is a coop");
            entity.Property(e => e.Coop279).HasComment("The entity is a coop under KRS 279");
            entity.Property(e => e.Country).HasComment("The country the entity was filed in, if not the USA.");
            entity.Property(e => e.Docloc).HasComment("A location for archived documents for this entity");
            entity.Property(e => e.EmailAddress).HasComment("Email address for annual report notification.");
            entity.Property(e => e.Expdte).HasComment("Expiration date of entity, as defined in its organizational document, or as defined by statute for assumed names");
            entity.Property(e => e.Filedate).HasComment("This field contains the date the business record was filed with the Secretary of State.  A business record contains either filedate, orgdate, or authdate, whichever is appropriate for the company type.");
            entity.Property(e => e.Id).HasComment("System-assigned numeric ID of this entity, non-unique. This is the official organization number given to a business when it is registered with the Secretary of State. The unique combination of ID, Comptype, and Compseq defines a company record. Related companies share the same ID.  Older versoins of the company (for example when a company is renamed by amendment) share an ID and comptype with different compseq.  An LLC (type 06) and its assumed names (type 12) share the same ID.  This file can be extended to link the initial officers associated with the business contained in 'All Initial Officers' with the field 'ID'.  Additionally, all current officers associated with a business contained in 'All Officers' may be joined by using the combination of 'ID' with 'comptype' and 'compseq'.");
            entity.Property(e => e.Krs277date).HasComment("Date the entity met requirements of KRS 277??");
            entity.Property(e => e.KyGovId).HasComment("Unique ID assigned by Ky.Gov to a filing made online.");
            entity.Property(e => e.KyGovXml).HasComment("For online KY.Gov filings, the XML document submitted by Ky.Gov");
            entity.Property(e => e.Lastrdte).HasComment("Date last annual report was filed");
            entity.Property(e => e.Mangnum).HasComment("LLC tpe of management, 1=by members, 2=by management.");
            entity.Property(e => e.Name).HasComment("The name of the entity as shown on its organizing document. Official business name registered with the Secretary of State.");
            entity.Property(e => e.Nameindex).HasComment("A normalized version of the company name, used for searches and name availability");
            entity.Property(e => e.Numofshr).HasComment("Ten numeric digits, profit corporations total number of authorized shares of stock. Used to compute organizational tax");
            entity.Property(e => e.Orgdate).HasComment("This field contains the date the LLC was filed with the Secretary of State.  A business record contains either filedate, orgdate, or authdate, whichever is appropriate for the company type.");
            entity.Property(e => e.Parcom).HasComment("10 numeric digits, number of common shares of stock. Rolled into numofshr. Deprecated.");
            entity.Property(e => e.Parcomno).HasComment("10 numeric digits, number of common nopar shares of stock. Rolled into numofshr.Deprecated");
            entity.Property(e => e.Parpre).HasComment("10 numeric digits, preferred shares of stock. Rolled into numofshr. deprecated.");
            entity.Property(e => e.Parpreno).HasComment("10 numeric digits. Number of preferred nopar shares.  Rolled into numofshr. Deprecated.");
            entity.Property(e => e.Poaddr1).HasComment("Principal office address line 1");
            entity.Property(e => e.Poaddr2).HasComment("Principal office address line 2");
            entity.Property(e => e.Poaddr3).HasComment("Principal office address line 3");
            entity.Property(e => e.Poaddr4).HasComment("Principal office address line 4");
            entity.Property(e => e.Pocity).HasComment("Principal office address city");
            entity.Property(e => e.Postate).HasComment("Principal office address state or country defined in states table");
            entity.Property(e => e.Pozip).HasComment("Principal office address postal code");
            entity.Property(e => e.Prevrdte).HasComment("Date previous annual report was filed");
            entity.Property(e => e.Printed).HasComment("Indication of whether an annual report or assumed name renewal has been printed");
            entity.Property(e => e.Profit).HasComment("For corporation and LLCs, P=profit, N=non-profit.");
            entity.Property(e => e.Purpose).HasComment("The purpose of a professional service corporation, for online Ky.Gov filings only.");
            entity.Property(e => e.Raaddr1).HasComment("Registered agent address, line 1");
            entity.Property(e => e.Raaddr2).HasComment("Registered agent address, line 2");
            entity.Property(e => e.Raaddr3).HasComment("Registered agent address, line 3");
            entity.Property(e => e.Raaddr4).HasComment("Registered agent address, line 4");
            entity.Property(e => e.Racity).HasComment("Registered agent address city name");
            entity.Property(e => e.Raentitysig).HasComment("Signature of representative of entity registered agent                                  ");
            entity.Property(e => e.Raname).HasComment("registered agent name, or 'KY SEC OF STATE' if agent resigned");
            entity.Property(e => e.Raresdte).HasComment("Registered agent resign date");
            entity.Property(e => e.Rastate).HasComment("Registered agent address 2 char state code, must be KY");
            entity.Property(e => e.Razip).HasComment("Registered agent address zip code");
            entity.Property(e => e.Recorddate).HasComment("A single field showing the date the company was first recorded in Kentucky, comes from orgdate, authdate, filedate as appropriate");
            entity.Property(e => e.Rendte).HasComment("Date as assumed name or name reservation was renewed.");
            entity.Property(e => e.Standing).HasComment("G = good, B= bad. Bad means a annual report is late, or the entity was administratively dissolved. Null = ARP not required.");
            entity.Property(e => e.State).HasComment("Two character state or country code, defined in states table.");
            entity.Property(e => e.Status).HasComment("A=active, I=inactive, X=pending dissolution, K=New Ky.Gov filing (not approved yet), N=New paper filing, not verified yet, D=Deleted. H = Historical Record (old and inactive, entered only so that we can destroy the old paper records)");
            entity.Property(e => e.Type).HasComment("Three character company type, defined in entitytypes table");
            entity.Property(e => e.Userid).HasComment("userid of original Secretary of State filing officer.");
        });

        modelBuilder.Entity<County>(entity =>
        {
            entity.Property(e => e.Ctr).ValueGeneratedNever();
        });

        modelBuilder.Entity<Emailaddress>(entity =>
        {
            entity.ToTable("emailaddress", tb =>
                {
                    tb.HasTrigger("emailaddressChgDate_Trigger");
                    tb.HasTrigger("emailaddressDateAdded_Trigger");
                });
        });

        modelBuilder.Entity<Entitytype>(entity =>
        {
            entity.HasKey(e => e.Code)
                .HasName("aaaaaentitytypes_PK")
                .IsClustered(false);

            entity.ToTable("entitytypes", tb =>
                {
                    tb.HasTrigger("entitytypes_ITrig");
                    tb.HasTrigger("entitytypes_UTrig");
                });
        });

        modelBuilder.Entity<Fee>(entity =>
        {
            entity.HasKey(e => e.Type)
                .HasName("aaaaaFees_PK")
                .IsClustered(false);
        });

        modelBuilder.Entity<Filmcode>(entity =>
        {
            entity.HasKey(e => e.Doctype).IsClustered(false);

            entity.HasIndex(e => e.Doctype, "filmcodes_namex")
                .IsUnique()
                .IsClustered();
        });

        modelBuilder.Entity<FutureAct>(entity =>
        {
            entity.HasKey(e => e.Ctr)
                .HasName("aaaaaFutureAct_PK")
                .IsClustered(false);
        });

        modelBuilder.Entity<Image>(entity =>
        {
            entity.ToTable("Image", tb =>
                {
                    tb.HasTrigger("Image_AddedDate_Trigger");
                    tb.HasTrigger("Image_ChgDate_Trigger");
                    tb.HasTrigger("TR_Audit_Image");
                });

            entity.Property(e => e.Ctr).HasComment("A unique identifier for this record (autonumber)");
            entity.Property(e => e.Compseq)
                .IsFixedLength()
                .HasComment("compseq of the company record this image refers to");
            entity.Property(e => e.Comptype)
                .IsFixedLength()
                .HasComment("comptype field of the company record this image refers to");
            entity.Property(e => e.Doccount).HasComment("Number of pages in this document");
            entity.Property(e => e.Docdate).HasComment("fiing date of the document");
            entity.Property(e => e.Docid).HasComment("File name for this document");
            entity.Property(e => e.Doctype)
                .IsFixedLength()
                .HasComment("Type of this image record (from filmcodes table)");
            entity.Property(e => e.Dt).HasComment("Date the image was created");
            entity.Property(e => e.Frame).HasComment("microfilm frame number of the permanent copy of this image");
            entity.Property(e => e.Id)
                .IsFixedLength()
                .HasComment("ID of the company record this image refers to");
            entity.Property(e => e.IncorrectCompany).HasComment("This imaage record is assigned to the wrong company");
            entity.Property(e => e.Inerror)
                .HasDefaultValueSql("(0)")
                .HasComment("Has the image been marked in error during verification 1-yes 0=no");
            entity.Property(e => e.Microfilmed).HasComment("Has the image been microfilmed 1=yes 0=0no");
            entity.Property(e => e.PrioritizeForWalkin).HasComment("Reinstatement image for a walkin filer");
            entity.Property(e => e.Private)
                .HasDefaultValueSql("(0)")
                .HasComment("Is the image private 1=yes 0=no");
            entity.Property(e => e.Reason).HasComment("Reason this image record was deleted (see deletedimages)");
            entity.Property(e => e.RecordChgDate).HasComment("Date this was record was last modified");
            entity.Property(e => e.Reviewed).HasComment("has this image been reviewed by the review team 1=yes 0=no");
            entity.Property(e => e.Reviewedby).HasComment("userid of the reviewer");
            entity.Property(e => e.Revieweddate).HasComment("date the image was reviewed");
            entity.Property(e => e.Roll).HasComment("microfilm roll number for the permanent copy of this image");
            entity.Property(e => e.Sentoff).HasComment("Has the microfilmed image been sent to the microfilm contractor 1=yes 0=no");
            entity.Property(e => e.Userid).HasComment("userid of the filer who created the image");
            entity.Property(e => e.VerificationNotes).HasComment("Notes field for verification");
            entity.Property(e => e.Verified).HasComment("Has the image been verified 1=yes 0=no");
            entity.Property(e => e.Verifiedby).HasComment("Userid of the verifier");
            entity.Property(e => e.Verifieddate).HasComment("Date the image was verified");
        });

        modelBuilder.Entity<Letter>(entity =>
        {
            entity.HasOne(d => d.TypeNavigation).WithMany(p => p.Letters).HasConstraintName("FK_letter_lettertype");
        });

        modelBuilder.Entity<Lettertype>(entity =>
        {
            entity.HasKey(e => e.Type).HasName("PK_lettertype_1");
        });

        modelBuilder.Entity<NewArpOfficer>(entity =>
        {
            entity.ToTable("NewArpOfficer", tb =>
                {
                    tb.HasTrigger("NewArpOfficer_ChangeTrigger");
                    tb.HasTrigger("newarpofficer_deletetrigger");
                });

            entity.Property(e => e.Arpctr).HasComment("Pointer to NewArponline record");
        });

        modelBuilder.Entity<NewArpOfficerDeleted>(entity =>
        {
            entity.ToTable("NewArpOfficerDeleted", tb => tb.HasTrigger("NewArpOfficerDeletedDate_Trigger"));
        });

        modelBuilder.Entity<NewArponline>(entity =>
        {
            entity.ToTable("NewArponline", tb =>
                {
                    tb.HasTrigger("NewArpOnline_ChangeTrigger");
                    tb.HasTrigger("newarponline_deletetrigger");
                });

            entity.Property(e => e.Completed).HasDefaultValueSql("((0))");
            entity.Property(e => e.Fileyear).IsFixedLength();
            entity.Property(e => e.Printed).HasDefaultValueSql("((0))");
        });

        modelBuilder.Entity<NextId>(entity =>
        {
            entity.HasKey(e => e.Ctr).IsClustered(false);

            entity.Property(e => e.NextId1)
                .HasDefaultValueSql("('0000000')")
                .IsFixedLength();
        });

        modelBuilder.Entity<Officer>(entity =>
        {
            entity.HasKey(e => e.Ctr)
                .HasName("aaaaaOfficers_PK")
                .IsClustered(false);

            entity.HasIndex(e => new { e.Id, e.Comptype, e.Compseq }, "id")
                .IsClustered()
                .HasFillFactor(90);
        });

        modelBuilder.Entity<Offtype>(entity =>
        {
            entity.HasKey(e => e.Ctr).HasName("PK___1__14");
        });

        modelBuilder.Entity<OnlineFiling>(entity =>
        {
            entity.Property(e => e.FeeType).IsFixedLength();
            entity.Property(e => e.OnlineFilingId).ValueGeneratedOnAdd();
        });

        modelBuilder.Entity<Payment>(entity =>
        {
            entity.HasKey(e => e.Ctr)
                .HasName("PK_Payments_1__15")
                .IsClustered(false);

            entity.ToTable(tb => tb.HasTrigger("payments_deletedtrigger"));

            entity.HasIndex(e => new { e.Id, e.Comptyp, e.Compseq }, "payment_idx").IsClustered();
        });

        modelBuilder.Entity<Person>(entity =>
        {
            entity.HasKey(e => e.Ctr)
                .HasName("aaaaaPeople_PK")
                .IsClustered(false);

            entity.HasIndex(e => e.CompanyId, "CompanyID_ix").IsClustered();

            entity.Property(e => e.Ctr).HasComment("A unique idientifier for this record (autonumber)");
            entity.Property(e => e.CompanyId).HasComment("ID of the company record this name refers to");
            entity.Property(e => e.Name).HasComment("The name of the person or entity");
            entity.Property(e => e.Seq).HasComment("No longer used (deprecated)");
            entity.Property(e => e.Type).HasComment("Officer type of this name (from offtypes table)");
        });

        modelBuilder.Entity<ReturnLetterText>(entity =>
        {
            entity.Property(e => e.Timestamp)
                .IsRowVersion()
                .IsConcurrencyToken();
        });

        modelBuilder.Entity<Returnlettersubject>(entity =>
        {
            entity.HasKey(e => e.Ctr).HasName("PK_returnletterreasons");
        });

        modelBuilder.Entity<Searchlog>(entity =>
        {
            entity.HasKey(e => e.Ctr).HasName("PK_Searchlogn");
        });

        modelBuilder.Entity<State>(entity =>
        {
            entity.HasKey(e => e.Code)
                .HasName("aaaaastates_PK")
                .IsClustered(false);

            entity.ToTable("states", tb =>
                {
                    tb.HasTrigger("states_ITrig");
                    tb.HasTrigger("states_UTrig");
                });
        });

        modelBuilder.Entity<Xstatus>(entity =>
        {
            entity.HasKey(e => e.Ctr).IsClustered(false);

            entity.Property(e => e.Ctr).ValueGeneratedNever();
            entity.Property(e => e.Arppin).IsFixedLength();
            entity.Property(e => e.EmailAddress).HasComment("Eemail address for annual report notification.");
            entity.Property(e => e.Printed).HasDefaultValueSql("((0))");
            entity.Property(e => e.Userid).HasComment("userid of original filer");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}